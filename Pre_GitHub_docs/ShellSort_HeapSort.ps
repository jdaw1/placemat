%!PS

% This version 23:25 Thursday 4th April 2019
% https://en.wikipedia.org/wiki/Talk:Shellsort#Coprime

/DeBugLevel 65535 def
/OutputToLog {=} bind def


/ShellSortGaps
[
	% Each is nearest to 2.2* previous, subject to being coprime to all previous except 1.
	% https://en.wikipedia.org/wiki/Talk:Shellsort#Coprime
	% PostScript's max array size usually 65535, but an implementation could allow longer.
	1 2 5 11 23 51 113 247 541 1189 2617 5761 12671 27877 61331 134933 296843 653057 1436731
	3160811 6953783 15298321 33656309 74043881 162896543 358372411 788419321 1734522497
] readonly def
/ShellSortGapsLength1Sub ShellSortGaps length 1 sub def
% Immediate dependencies: DeBugLevel; ShellSortGaps; ShellSortGapsLength1Sub.
% [ thing thing ... ] {comparison code that takes two things and returns a boolean} ShellSort -
% Sorts array such that for elements i and i+1 the comparison code returns true (or equal).
% E.g.,   [1 2 3 4 5 2. 3. 4. 5. 3 4 5 4. 5. 5] dup {le} ShellSort ==   outputs   [1 2 2.0 3 3 3.0 4 4.0 4 4.0 5 5 5.0 5.0 5]
% Based on https://www.tutorialspoint.com/data_structures_algorithms/shell_sort_algorithm.htm
/ShellSort
{
	DeBugLevel 25 le {(+ShellSort) OutputToLog} if
	8 dict begin
	/ComparisonCode exch def
	/Things exch def
	/n Things length def
	n 2 ge
	{
		1  1  //ShellSortGapsLength1Sub
		{
			/gapNum exch def
			//ShellSortGaps gapNum get 2 mul n gt {/gapNum gapNum 1 sub def exit} if
		} for  % gapNum up

		gapNum  -1  0
		{
			//ShellSortGaps exch get /gap exch def
			gap  1  n 1 sub
			{
				/outer exch def
				/valueToInsert Things outer get def
				/inner outer def
				{
					inner gap lt {exit} if
					Things inner gap sub get  valueToInsert  ComparisonCode  {exit} if
					Things  inner  Things inner gap sub get  put
					/inner inner gap sub def
				} loop  % inner
				Things inner valueToInsert put
			} for  % outer
		} for  % gap down
	} if  % n 2 ge
	end
	DeBugLevel 25 le {(-ShellSort) OutputToLog} if
} bind def  % /ShellSort
currentdict /ShellSortGaps undef
currentdict /ShellSortGapsLength1Subs undef

() =
(ShellSort tests)=
[2 0 4 3 1] dup {lt} ShellSort ==
[1 2 3 4 5 2. 3. 4. 5. 3 4 5 4. 5. 5] dup {le} ShellSort ==
[1 2 3 4 5 6 7 2. 3. 4. 5. 6. 7. 3 4 5 6 7 4. 5. 6. 7. 5 6 7 6. 7. 7] dup {le} ShellSort ==
()=



% Immediate dependencies: DeBugLevel; OutputToLog.
% [ thing thing ... ] {comparison code that takes two things and returns a boolean} HeapSort -
% Sorts array such that for elements i and i+1 the comparison code returns true.
% E.g.,   [2 0 4 3 1] dup {lt} HeapSort ==   outputs   [0 1 2 3 4]
% Based on version by J. Plowes dated 06 Aug 1997, which was based on Numerical Recipes in C.
/HeapSort
{
	DeBugLevel 25 le {(+HeapSort) OutputToLog} if
	% CAUTION: some editions of Recipes contain versions of HeapSort that don't work -- they don't quite finish the sort. Take care!
	8 dict begin
	/ComparisonCode exch def
	/ra exch def
	/n ra length def

	n 1 gt
	{
		/l n 2 idiv 1 add def
		/ir n def
		% sorting loop
		{
			l 1 gt
			{
				% In hiring phase
				/l l 1 sub def
				/rra ra l 1 sub get def
			}{
				% In retirement-and-promotion phase
				/rra ra ir 1 sub get def  % Clear space at end of ra
				ra ir 1 sub ra 0 get put  % Retire top element into space
				/ir ir 1 sub def
				ir 1 eq
				{
					ra 0 rra put  % Final element
					exit          % Finished
				} if
			} ifelse  % l 1 gt

			% Whichever phase we're in, need to sift rra down to proper level
			/i l def
			/j l 2 mul def

			% This loop and exit replicates the while used in Recipes
			{
				j ir gt {exit} if
				j ir lt {ra j 1 sub get  ra j get  ComparisonCode} {//false} ifelse
				{
					/j j 1 add def
				} if
				rra  ra j 1 sub get  ComparisonCode
				{
					% Demote rra
					ra i 1 sub ra j 1 sub get put
					/i j def
					/j j i add def
				}{
					/j ir 1 add def  % This is rra's level. Set j to terminate sift-down
				} ifelse  % rra  ra j 1 sub get  compcode
			} loop   % End of "while" loop
			ra i 1 sub rra put  % put rra into its slot
		} loop % end of sorting loop
	} if  % n 1 gt
	end
	DeBugLevel 25 le {(-HeapSort) OutputToLog} if
} bind def  % /HeapSort


(HeapSort tests)=
[2 0 4 3 1] dup {lt} HeapSort ==
[1 2 3 4 5 2. 3. 4. 5. 3 4 5 4. 5. 5] dup {le} HeapSort ==
[1 2 3 4 5 6 7 2. 3. 4. 5. 6. 7. 3 4 5 6 7 4. 5. 6. 7. 5 6 7 6. 7. 7] dup {le} HeapSort ==
()=


/ToString
{
	1 dict begin  dup type cvlit /Type exch def
	1 {
		Type /integertype  eq {11 string cvs exit} if
		Type /realtype     eq {16 string cvs exit} if
		Type /nametype     eq {dup length string cvs exit} if
		Type /stringtype   eq {exit} if
		Type /booleantype  eq {5 string cvs exit} if
		Type /operatortype eq {127 string cvs exit} if
		Type /marktype     eq {pop (mark) exit} if
		Type /nulltype     eq {pop (null) exit} if
		0 //true ThingToDebugText  % fall-back
	} repeat  end
} bind def  % /ToString

% Immediate dependencies: ToString.
% mark string|number|other ... string|number|other  ConcatenateToMark  string
/ConcatenateToMark
{
	4 dict begin
	counttomark /ctm exch def  /n 0 def
	ctm {ToString  dup length n add /n exch def  ctm 1 roll} repeat
	/p 0 def  /s n 65535 2 copy gt {exch} if pop string def
	ctm  -1  0
	{
		dup 0 gt
		{
			-1 roll   dup length p add  65532 le
				{s exch p exch dup length p add /p exch def putinterval}
				{s exch p exch 0 65532 p sub getinterval putinterval  s 65532 (...) putinterval  cleartomark  s  exit}
			ifelse  % too long
		} {pop pop s} ifelse
	} for
	end
} bind def  % /ConcatenateToMark


(n\tPriorState\tShell\tHeap) =
/n 511 def
{
	64
	{
		/ThingsS [ n {rand} repeat ] def
		/ThingsH n array def  ThingsS ThingsH copy pop

		mark  n  (\tShuffled\t)
		usertime ThingsS {le} ShellSort usertime exch sub  (\t)	
		usertime ThingsH {le} HeapSort  usertime exch sub
		dup dup 60 gt {3 index dup 60 gt {exch div ln 100 mul (\t) exch} {pop pop} ifelse} {pop} ifelse
		ConcatenateToMark =
	} repeat

	mark  n  (\tSorted\t)
	usertime ThingsS {le} ShellSort usertime exch sub  (\t)
	usertime ThingsH {le} HeapSort  usertime exch sub
	dup dup 60 gt {3 index dup 60 gt {exch div ln 100 mul (\t) exch} {pop pop} ifelse} {pop} ifelse
	ConcatenateToMark =

	mark  n  (\tReverse\t)
	usertime ThingsS {ge} ShellSort usertime exch sub  (\t)
	usertime ThingsH {ge} HeapSort  usertime exch sub
	dup dup 60 gt {3 index dup 60 gt {exch div ln 100 mul (\t) exch} {pop pop} ifelse} {pop} ifelse
	ConcatenateToMark =

	/n n 2 mul 1 add def
	n 65535 gt {exit} if
} bind loop



() = () =
count             (      = count           : should = 0) exch 1 index cvs pop =
countdictstack    (      = countdictstack  : should = 3) exch 1 index cvs pop =
vmstatus pop pop  (      = vmstatus pop pop: should = 2 in Distiller or 1 in GhostScript) exch 1 index cvs pop =
count 0 ne {(+pstack) = pstack (-pstack) =} if
